#[cfg(test)]
mod tests {
    use rdkit_sys::molecule::*;
    #[test]
    fn test_fragment_parent() {
        let orig_smiles = "CCCC.CC";
        let mut pkl_mol = Molecule::new(orig_smiles, "").unwrap();
        pkl_mol.fragment_parent("");
        let parent_smiles = pkl_mol.get_smiles("");
        println!("{:?}", parent_smiles);
        assert_eq!(pkl_mol.get_smiles(""), "CCCC");
    }

    #[test]
    fn test_canonical_tautomer() {
        let orig_smiles = "Oc1c(cccc3)c3nc2ccncc12";
        let mut pkl_mol = Molecule::new(orig_smiles, "").unwrap();
        pkl_mol.canonical_tautomer("");
        let can_taut_smiles = pkl_mol.get_smiles("");
        println!("{:?}", can_taut_smiles);
        assert_eq!(can_taut_smiles, "O=c1c2ccccc2[nH]c2ccncc12");
    }

    #[test]
    fn test_rdkit_fingerprint() {
        let orig_smiles = "Oc1c(cccc3)c3nc2ccncc12";
        let mut pkl_mol = Molecule::new(orig_smiles, "").unwrap();
        let rdkit_fp = pkl_mol.get_rdkit_fp("");
        println!("{:?}", rdkit_fp);
        assert_eq!(rdkit_fp
    }

    #[test]
    fn test_substruct_match() {
        let mol = Molecule::new("CCCCCCC", "").unwrap();
        let query_mol = Molecule::get_qmol("CCCC", "").unwrap();
        let res = mol.get_substruct_match(&query_mol, "");
        println!("{:?}", res);
        assert!(res.len() > 2);
    }

    #[test]
    fn test_tanimoto_similarity() {
        let smiles1 = "c1ccccc1CCCCCCCC";
        let mol1 = Molecule::new(smiles1, "").unwrap();
        let fp1 = mol1.get_rdkit_fp("");
        let fp1 = fp1.as_bytes();

        let smiles2 = "c1ccccc1CCCCCC";
        let mol2 = Molecule::new(smiles2, "").unwrap();
        let fp2 = mol2.get_rdkit_fp("");
        let fp2 = fp2.as_bytes();

        let mut num_matches = 0;
        let mut fp1_ones = 0;
        let mut fp2_ones = 0;
        for idx in 0..fp1.len() {
            if fp1[idx] == 49 { fp1_ones += 1; }
            if fp2[idx] == 49 { fp2_ones += 1; }
            if fp1[idx] == 49 && fp2[idx] == 49 { num_matches += 1; }
        }

        let num_matches = num_matches as f32;
        let fp1_ones = fp1_ones as f32;
        let fp2_ones = fp2_ones as f32;

        let tanimoto = num_matches / (fp1_ones + fp2_ones - num_matches);

        println!("{:?}", tanimoto);
        assert!(tanimoto > 0.94);
    }
}